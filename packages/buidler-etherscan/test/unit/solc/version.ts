import { BuidlerPluginError } from "@nomiclabs/buidler/plugins";
import { assert } from "chai";
// tslint:disable: no-implicit-dependencies
import nock from "nock";
import semver from "semver";

import { decodeSolcMetadata } from "../../../src/solc/metadata";
import {
  getLongVersion,
  InferralType,
  inferSolcVersion,
} from "../../../src/solc/version";

describe("solc version retrieval tests", () => {
  it("solc version with commit is returned", async () => {
    nock("https://raw.githubusercontent.com")
      .get("/ethereum/solc-bin/gh-pages/bin/list.json")
      .reply(200, {
        releases: {
          "0.5.1": "soljson-v0.5.1-commitsomething.js",
        },
      });

    const fullVersion = await getLongVersion("0.5.1");
    assert.equal(fullVersion, "v0.5.1-commitsomething");
  });

  it("an exception is thrown if there was an error sending request", async () => {
    nock("https://raw.githubusercontent.com")
      .get("/ethereum/solc-bin/gh-pages/bin/list.json")
      .reply(404);

    return getLongVersion("0.5.1").catch((e) =>
      assert.isTrue(e instanceof BuidlerPluginError)
    );
  });

  it("an exception is thrown if the specified version doesn't exist", async () => {
    nock("https://raw.githubusercontent.com")
      .get("/ethereum/solc-bin/gh-pages/bin/list.json")
      .reply(200, {
        releases: {
          "0.5.2": "soljson-v0.5.2-commitsomething.js",
        },
      });

    return getLongVersion("0.5.1")
      .then(() => {
        assert.fail();
      })
      .catch((e) => {
        assert.isTrue(e instanceof BuidlerPluginError);
      });
  });
});

describe("solc version inferral tests", () => {
  describe("very old compiler inferral; these don't emit metadata", () => {
    /**
     * These tests require compiling a contract with solc v0.4.6 or earlier.
     * This is not currently possible with buidler out of the box.
     */
    it.skip("bytecode emitted by solc v0.4.6; the last version to feature no metadata", () => {});

    // We can test with gibberish instead
    it("when payload is gibberish", async () => {
      const payload = Buffer.from("This is no contract bytecode.");
      const versionRange = await inferSolcVersion(payload);
      assert.equal(
        versionRange.inferralType,
        InferralType.METADATA_ABSENT,
        "False positive in metadata detection"
      );

      const veryOldVersion = "0.4.6";
      assert.isTrue(
        semver.satisfies(veryOldVersion, versionRange.range),
        `${veryOldVersion} should be included in ${versionRange}`
      );
      const anotherVeryOldVersion = "0.4.0";
      assert.isTrue(
        semver.satisfies(anotherVeryOldVersion, versionRange.range),
        `${anotherVeryOldVersion} should be included in ${versionRange}`
      );

      const oldVersion = "0.4.7";
      assert.isFalse(
        semver.satisfies(oldVersion, versionRange.range),
        `${oldVersion} shouldn't be included in ${versionRange}`
      );
    });
  });

  describe("old compiler inferral; these embed metadata without solc version", () => {
    it.skip("bytecode emitted by solc v0.4.7; the first version to feature metadata", () => {});

    // The minimum solc version that can be run with buidler out of the box.
    it("bytecode emitted by solc v0.4.12", async () => {
      const contract = {
        contractName: "TestContract",
        runtimeBytecode:
          "0x60606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313bdfacd1461003e575b600080fd5b341561004957600080fd5b6100516100cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100925780820151818401525b602081019050610076565b50505050905090810190601f1680156100bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d5610176565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016b5780601f106101405761010080835404028352916020019161016b565b820191906000526020600020905b81548152906001019060200180831161014e57829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a723058201c0fc1b1566b6243fc07daa6a27c042ed8bdb3c0bbf4d9d2223339f21299056b0029",
        deployedBytecode:
          "0x60606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313bdfacd1461003e575b600080fd5b341561004957600080fd5b6100516100cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100925780820151818401525b602081019050610076565b50505050905090810190601f1680156100bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d5610176565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016b5780601f106101405761010080835404028352916020019161016b565b820191906000526020600020905b81548152906001019060200180831161014e57829003601f168201915b505050505090505b90565b6020604051908101604052806000815250905600a165627a7a723058201c0fc1b1566b6243fc07daa6a27c042ed8bdb3c0bbf4d9d2223339f21299056b0029",
        solcVersion: "0.4.12",
        linkReferences: {},
      };
      const bytecode = Buffer.from(contract.deployedBytecode.slice(2), "hex");
      const versionRange = await inferSolcVersion(bytecode);
      assert.isTrue(semver.satisfies(contract.solcVersion, versionRange.range));
      assert.equal(
        versionRange.inferralType,
        InferralType.METADATA_PRESENT_VERSION_ABSENT
      );
    });

    it("bytecode emitted by the latest solc in the 0.4 series", async () => {
      const contract = {
        contractName: "TestContract",
        runtimeBytecode:
          "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313bdfacd14610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b50505050509050905600a165627a7a72305820b6817df49c1566ffc22f6e10f7b6810c64f515e307c157f5a240574f5ebb10c70029",
        deployedBytecode:
          "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313bdfacd14610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b50505050509050905600a165627a7a72305820b6817df49c1566ffc22f6e10f7b6810c64f515e307c157f5a240574f5ebb10c70029",
        solcVersion: "0.4.26",
        linkReferences: {},
      };
      const bytecode = Buffer.from(contract.deployedBytecode.slice(2), "hex");
      const versionRange = await inferSolcVersion(bytecode);
      assert.isTrue(semver.satisfies(contract.solcVersion, versionRange.range));
      assert.equal(
        versionRange.inferralType,
        InferralType.METADATA_PRESENT_VERSION_ABSENT
      );
    });

    it("bytecode emitted by solc v0.5.8; the last version to feature no solc version field", async () => {
      const contract = {
        contractName: "TestContract",
        runtimeBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea165627a7a7230582002725dc23a155ea5da565f750797acdf177aed268ecad6dd082b0df02cbcbf4c0029",
        deployedBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea165627a7a7230582002725dc23a155ea5da565f750797acdf177aed268ecad6dd082b0df02cbcbf4c0029",
        solcVersion: "0.5.8",
        linkReferences: {},
      };
      const bytecode = Buffer.from(contract.deployedBytecode.slice(2), "hex");
      const versionRange = await inferSolcVersion(bytecode);
      assert.isTrue(semver.satisfies(contract.solcVersion, versionRange.range));
      assert.equal(
        versionRange.inferralType,
        InferralType.METADATA_PRESENT_VERSION_ABSENT
      );
    });
  });

  describe("exact compiler version inferral", () => {
    it("bytecode emitted by solc v0.5.9; the first compiler to feature solc version field", async () => {
      const contract = {
        contractName: "TestContract",
        runtimeBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea265627a7a723058200e0c1f0b33a8f60309ea8686e3561e5e0a9619994463519a00809a5a51f1c53664736f6c63430005090032",
        deployedBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea265627a7a723058200e0c1f0b33a8f60309ea8686e3561e5e0a9619994463519a00809a5a51f1c53664736f6c63430005090032",
        solcVersion: "0.5.9",
        linkReferences: {},
      };
      const bytecode = Buffer.from(contract.deployedBytecode.slice(2), "hex");
      const versionRange = await inferSolcVersion(bytecode);
      assert.isTrue(semver.satisfies(contract.solcVersion, versionRange.range));
      assert.equal(versionRange.inferralType, InferralType.EXACT);
    });

    it("bytecode emitted by solc v0.6.0 without swarm hash nor ipfs hash", async () => {
      const contract = {
        contractName: "TestContract",
        runtimeBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea164736f6c6343000600000a",
        deployedBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea164736f6c6343000600000a",
        solcVersion: "0.6.0",
        linkReferences: {},
      };
      const bytecode = Buffer.from(contract.deployedBytecode.slice(2), "hex");
      const metadata = await decodeSolcMetadata(bytecode);
      assert.hasAllKeys(
        metadata,
        ["solc"],
        "Metadata has additional unexpected information"
      );
      const versionRange = await inferSolcVersion(bytecode);
      assert.isTrue(semver.satisfies(contract.solcVersion, versionRange.range));
      assert.equal(versionRange.inferralType, InferralType.EXACT);
    });

    it("bytecode emitted by solc v0.7.0, one of the latest compilers", async () => {
      const contract = {
        contractName: "TestContract",
        runtimeBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea2646970667358221220981f0e56fe0654616c8fd35f98d9ac6b2a7f0882184f93226486adfca553caef64736f6c63430007000033",
        deployedBytecode:
          "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806313bdfacd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561014b5780601f106101205761010080835404028352916020019161014b565b820191906000526020600020905b81548152906001019060200180831161012e57829003601f168201915b505050505090509056fea2646970667358221220981f0e56fe0654616c8fd35f98d9ac6b2a7f0882184f93226486adfca553caef64736f6c63430007000033",
        solcVersion: "0.7.0",
        linkReferences: {},
        immutableReferences: {},
      };
      const bytecode = Buffer.from(contract.deployedBytecode.slice(2), "hex");
      const versionRange = await inferSolcVersion(bytecode);
      assert.isTrue(semver.satisfies(contract.solcVersion, versionRange.range));
      assert.equal(versionRange.inferralType, InferralType.EXACT);
      const [major, minor, patch] = contract.solcVersion
        .split(".")
        .map((number) => parseInt(number, 10));
      const newerVersion = `${major}.${minor}.${patch + 1}`;
      assert.isFalse(
        semver.satisfies(newerVersion, versionRange.range),
        "Inference for this version range should allow only one version."
      );
    });
  });
});
